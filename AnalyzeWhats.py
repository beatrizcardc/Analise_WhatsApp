import streamlit as st
import pandas as pd
import re
import matplotlib.pyplot as plt
from collections import Counter
import nltk
from nltk.corpus import stopwords
from nltk.util import ngrams
import io

nltk.download("stopwords")
stop_words = set(stopwords.words("portuguese"))

# ðŸ“Œ ConfiguraÃ§Ã£o do Login
def check_password():
    """Verifica se o usuÃ¡rio e senha estÃ£o corretos."""
    def password_entered():
        if (
            st.session_state.get("username") == "projetoestaciobeatriz"
            and st.session_state.get("password") == "Scrum@2025"
        ):
            st.session_state["authenticated"] = True
        else:
            st.session_state["authenticated"] = False
            st.warning("UsuÃ¡rio ou senha incorretos!")

    if "authenticated" not in st.session_state:
        st.text_input("UsuÃ¡rio", key="username")
        st.text_input("Senha", type="password", key="password")
        st.button("Login", on_click=password_entered)
        return False
    elif not st.session_state["authenticated"]:
        st.text_input("UsuÃ¡rio", key="username")
        st.text_input("Senha", type="password", key="password")
        st.button("Login", on_click=password_entered)
        return False
    return True

# Verifica login antes de carregar o app
if not check_password():
    st.stop()

# ðŸ“Œ Nome e IntroduÃ§Ã£o do Aplicativo (Agora no TOPO)
st.title("ðŸ“Š AnalyzeWhats - AnÃ¡lise de Mensagens do WhatsApp")

st.markdown("""
### ðŸ“Œ Sobre o AnalyzeWhats
O **AnalyzeWhats** Ã© um aplicativo desenvolvido para analisar interaÃ§Ãµes em grupos de Cursos do WhatsApp.  
Com ele, vocÃª pode visualizar estatÃ­sticas sobre participaÃ§Ã£o dos usuÃ¡rios, tipos de mensagens mais frequentes e gerar **insights** para engajar mais seu grupo.

### ðŸ”Ž O que vocÃª pode fazer aqui?
âœ… **Filtrar mensagens** por perÃ­odo e categorias especÃ­ficas  
âœ… **Descobrir quem sÃ£o os usuÃ¡rios mais ativos** no grupo  
âœ… **Analisar os dias mais movimentados** no WhatsApp  
âœ… **Identificar as palavras mais frequentes** nas mensagens  
âœ… **Ver a distribuiÃ§Ã£o de mensagens por categoria**  
âœ… **Obter sugestÃµes para aumentar o engajamento**  

Use os **filtros na barra lateral** para personalizar sua anÃ¡lise!  
""")

# ðŸ“Œ Criar variÃ¡vel no `session_state` para armazenar o arquivo
if "uploaded_file" not in st.session_state:
    st.session_state["uploaded_file"] = None

# ðŸ“Œ Criar botÃ£o para resetar e limpar o upload
if st.button("ðŸ”„ Limpar e carregar novo arquivo"):
    st.session_state["uploaded_file"] = None
    st.rerun()

# ðŸ“Œ Upload do arquivo (Agora abaixo da explicaÃ§Ã£o)
uploaded_file = st.file_uploader("ðŸ“‚ FaÃ§a o upload do arquivo .txt exportado do WhatsApp", type=["txt"])

# ðŸ“Œ Verifica se um novo arquivo foi carregado e salva no session_state
if uploaded_file is not None:
    st.session_state["uploaded_file"] = uploaded_file

# ðŸ“Œ Se nenhum arquivo foi carregado, parar execuÃ§Ã£o
if st.session_state["uploaded_file"] is None:
    st.warning("âš  Nenhum arquivo carregado. FaÃ§a o upload de um arquivo .txt para comeÃ§ar a anÃ¡lise.")
    st.stop()

# ðŸ“Œ Processar o arquivo carregado
def processar_arquivo(file):
    """Processa o arquivo de conversa exportado do WhatsApp."""
    lines = file.getvalue().decode("utf-8").split("\n")
    
    message_pattern = re.compile(r"(\d{2}/\d{2}/\d{4}) (\d{2}:\d{2}) - ([^:]+): (.+)")
    data = []

    for line in lines:
        match = message_pattern.match(line)
        if match:
            date, time, sender, message = match.groups()
            data.append([date, time, sender, message])

    df = pd.DataFrame(data, columns=["Data", "Hora", "Remetente", "Mensagem"])
    df["Data"] = pd.to_datetime(df["Data"], format="%d/%m/%Y")

    return df

df = processar_arquivo(st.session_state["uploaded_file"])

# ðŸ“Œ Sidebar: Filtros
st.sidebar.header("ðŸ”Ž Filtros")
data_inicio = st.sidebar.date_input("Data Inicial", df["Data"].min())
data_fim = st.sidebar.date_input("Data Final", df["Data"].max())
categoria_selecionada = st.sidebar.multiselect("Selecione a(s) Categoria(s)", df["Categoria"].unique(), default=df["Categoria"].unique())

# ðŸ“Œ Aplicar filtros
df_filtrado = df[
    (df["Data"] >= pd.to_datetime(data_inicio)) & 
    (df["Data"] <= pd.to_datetime(data_fim)) & 
    (df["Categoria"].isin(categoria_selecionada))
]

# ðŸ“Œ Exibir DataFrame processado
st.write("âœ… **Arquivo processado com sucesso!** Visualizando os primeiros registros:")
st.dataframe(df_filtrado.head())

# ðŸ“Œ Dias da Semana Mais Ativos
st.header("ðŸ“… Dias da Semana Mais Ativos")

if not df_filtrado.empty:
    df_filtrado["Dia da Semana"] = pd.to_datetime(df_filtrado["Data"]).dt.day_name()

    # ðŸ”¹ Definir a ordem correta dos dias da semana (Segunda â†’ Domingo)
    ordem_dias = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

    # ðŸ”¹ Criar um tipo categÃ³rico para garantir a ordenaÃ§Ã£o
    df_filtrado["Dia da Semana"] = pd.Categorical(df_filtrado["Dia da Semana"], categories=ordem_dias, ordered=True)

    # ðŸ”¹ Contar mensagens e ordenar corretamente
    dias_ativos = df_filtrado["Dia da Semana"].value_counts().sort_index()

    # ðŸ“Š Exibir grÃ¡fico com os dias organizados na ordem correta
    st.bar_chart(dias_ativos)

else:
    st.warning("âš  Nenhum dado disponÃ­vel para exibir os dias mais ativos.")

# ðŸ“Œ Engajamento
st.sidebar.header("ðŸŒŸ Engajamento - Selecione 2 categorias principais para obter dicas de engajamento")
categoria1 = st.sidebar.selectbox("Escolha a 1Âª Categoria", df["Categoria"].unique())
categoria2 = st.sidebar.selectbox("Escolha a 2Âª Categoria", df["Categoria"].unique())

# ðŸ“Œ Conselhos para Melhorar o Engajamento
st.header("ðŸ“¢ Dicas para Melhorar o Engajamento")
dicas = {
    "Boas-vindas e Entradas no Grupo": "Envie mensagens personalizadas de boas-vindas e incentive apresentaÃ§Ãµes.",
    "Compartilhamento de ConteÃºdo e Links": "Poste conteÃºdos relevantes e incentive o compartilhamento de materiais informativos.",
    "DiscussÃµes TÃ©cnicas e Consultas": "Proponha perguntas instigantes e crie enquetes para gerar mais interaÃ§Ã£o.",
    "Convites e OrganizaÃ§Ã£o de Eventos": "Divulgue eventos com antecedÃªncia e envie lembretes frequentes.",
    "Mensagens de Apoio e FelicitaÃ§Ãµes": "Celebre conquistas do grupo e crie um ambiente acolhedor.",
    "Outro": "Incentive discussÃµes diversas e mantenha um ambiente colaborativo."
}

st.write(f"ðŸ’¡ **Dicas para aumentar {categoria1}:** {dicas.get(categoria1, 'Nenhuma dica disponÃ­vel.')}")
st.write(f"ðŸ’¡ **Dicas para aumentar {categoria2}:** {dicas.get(categoria2, 'Nenhuma dica disponÃ­vel.')}")

# ðŸ“Œ RodapÃ©
st.markdown("---")
st.markdown("ðŸ“Œ **Projeto desenvolvido por Beatriz Cardoso Cunha com Scrum para anÃ¡lise de grupos do WhatsApp.**")

